-- ====================================================================================================
-- CONTROLPATH : MainControlUnit
-- Finite State Machine controlling the beginning of a new game based on a switch and done signal value
-- 
-- States:
-- stopped   
-- startGame 
-- inGame
-- 
-- Autommatically generated by Quartus Prime using file MainControlUnit.smf
-- ====================================================================================================


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, the Altera Quartus Prime License Agreement,
-- the Altera MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Altera and sold by Altera or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Generated by Quartus Prime Version 15.1.1 Build 189 12/02/2015 SJ Lite Edition
-- Created on Mon May 29 16:12:58 2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY MainControlUnit IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        SW_0 : IN STD_LOGIC := '0';
        done : IN STD_LOGIC := '0';
        start : OUT STD_LOGIC
    );
END MainControlUnit;

ARCHITECTURE BEHAVIOR OF MainControlUnit IS
    TYPE type_fstate IS (stopped,startGame,inGame);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,SW_0,done)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= stopped;
            start <= '0';
        ELSE
            start <= '0';
            CASE fstate IS
                WHEN stopped =>
                    IF ((SW_0 = '1')) THEN
                        reg_fstate <= startGame;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= stopped;
                    END IF;

                    start <= '0';
                WHEN startGame =>
                    reg_fstate <= inGame;

                    start <= '1';
                WHEN inGame =>
                    IF (((done = '1') AND (SW_0 = '0'))) THEN
                        reg_fstate <= stopped;
                    ELSIF ((SW_0 = '1')) THEN
                        reg_fstate <= startGame;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= inGame;
                    END IF;

                    start <= '0';
                WHEN OTHERS => 
                    start <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
